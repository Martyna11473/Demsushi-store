/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/lamp.glb 
*/
import { useGLTF, useHelper } from '@react-three/drei'
import { JSX, useEffect, useRef } from 'react'
import * as THREE from 'three'
import { SpotLightHelper } from 'three'

export function Lamp(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('./models/lamp.glb')
  const target = useRef<THREE.Object3D>(null!)
  const light = useRef<THREE.SpotLight>(null!)
  // useHelper(light, SpotLightHelper)

  useEffect(() => {
    if (light.current && target.current) {
      light.current.target = target.current
    }
  }, [])

  return (
    <group dispose={null} {...props}>
      <mesh
        geometry={(nodes.Object_4 as THREE.Mesh).geometry}
        material={materials.Black}
      />
      <mesh
        geometry={(nodes.Object_5 as THREE.Mesh).geometry}
        material={materials.White}
      />

      <ambientLight intensity={1} color="#f28b0c" />

      <spotLight
        ref={light}
        position={[1.8, 7.1, 0]}
        angle={0.5}
        penumbra={0.02}
        intensity={40}
        distance={4}
        castShadow
        color={'#f28b0c'}
      />
      <object3D ref={target} position={[3.5, 0, 0]} />
    </group>
  )
}

useGLTF.preload('/lamp.glb')
